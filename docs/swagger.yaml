basePath: /
definitions:
  api.createProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - sku
    type: object
  api.createProjectItemRequest:
    properties:
      actual_hours:
        type: number
      assigned_to:
        type: string
      description:
        type: string
      due_date:
        type: string
      estimated_hours:
        type: number
      name:
        type: string
      priority:
        type: string
      project_id:
        type: string
      status:
        type: string
    required:
    - name
    - project_id
    type: object
  api.createProjectRequest:
    properties:
      budget:
        type: number
      description:
        type: string
      end_date:
        type: string
      name:
        type: string
      owner_id:
        type: string
      start_date:
        type: string
      status:
        type: string
    required:
    - name
    - owner_id
    type: object
  api.createUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  api.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  api.loginResponse:
    properties:
      token:
        type: string
    type: object
  api.updateProductStockRequest:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  domain.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  domain.Project:
    properties:
      budget:
        type: number
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      name:
        type: string
      owner_id:
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  domain.ProjectItem:
    properties:
      actual_hours:
        type: number
      assigned_to:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      estimated_hours:
        type: number
      id:
        type: string
      name:
        type: string
      priority:
        type: string
      project_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API REST in Go with Clean Architecture
  title: Golang API REST
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /v1/products:
    get:
      consumes:
      - application/json
      description: Get a list of products with optional filtering and pagination
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Filter by SKU
        in: query
        name: sku
        type: string
      - description: Minimum price filter
        in: query
        name: price_from
        type: number
      - description: Maximum price filter
        in: query
        name: price_to
        type: number
      - description: Minimum stock filter
        in: query
        name: stock_from
        type: integer
      - description: Maximum stock filter
        in: query
        name: stock_to
        type: integer
      - description: 'Number of items per page (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Sort order (default: created_at desc)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create product
      tags:
      - products
  /v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /v1/products/{id}/stock:
    patch:
      consumes:
      - application/json
      description: Update the stock quantity of a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Stock update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.updateProductStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update product stock
      tags:
      - products
  /v1/products/sku/{sku}:
    get:
      consumes:
      - application/json
      description: Get a specific product by its SKU
      parameters:
      - description: Product SKU
        in: path
        name: sku
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product by SKU
      tags:
      - products
  /v1/project-items:
    get:
      consumes:
      - application/json
      description: Get a list of project items with optional filtering and pagination
      parameters:
      - description: Filter by project ID
        in: query
        name: project_id
        type: string
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by priority
        in: query
        name: priority
        type: string
      - description: Filter by assigned user ID
        in: query
        name: assigned_to
        type: string
      - description: 'Number of items per page (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Sort order (default: created_at desc)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ProjectItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List project items
      tags:
      - project-items
    post:
      consumes:
      - application/json
      description: Create a new project item
      parameters:
      - description: Project item data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createProjectItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ProjectItem'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create project item
      tags:
      - project-items
  /v1/project-items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project item (soft delete)
      parameters:
      - description: Project item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete project item
      tags:
      - project-items
    get:
      consumes:
      - application/json
      description: Get a specific project item by its ID
      parameters:
      - description: Project item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProjectItem'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get project item by ID
      tags:
      - project-items
    put:
      consumes:
      - application/json
      description: Update an existing project item
      parameters:
      - description: Project item ID
        in: path
        name: id
        required: true
        type: string
      - description: Project item data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.ProjectItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProjectItem'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update project item
      tags:
      - project-items
  /v1/project-items/project/{projectId}:
    get:
      consumes:
      - application/json
      description: Get all project items for a specific project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ProjectItem'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get project items by project ID
      tags:
      - project-items
  /v1/projects:
    get:
      consumes:
      - application/json
      description: Get a list of projects with optional filtering and pagination
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by owner ID
        in: query
        name: owner_id
        type: string
      - description: 'Number of items per page (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Sort order (default: created_at desc)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Project'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project
      parameters:
      - description: Project data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create project
      tags:
      - projects
  /v1/projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project (soft delete)
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get a specific project by its ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update an existing project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with optional filtering and pagination
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: 'Number of items per page (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Sort order (default: created_at desc)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
swagger: "2.0"
